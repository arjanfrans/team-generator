{"version":3,"sources":["index.tsx"],"names":["App","props","state","members","guests","teams","value","names","trim","split","filter","Boolean","this","setState","slice","sort","Math","random","length","name1","pop","name2","shift","push","map","team","index","key","className","isMember","undefined","name","includes","rows","onChange","event","onGuestsChange","target","onMembersChange","onClick","generateTeams","renderTeams","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";+/MAYMA,E,kDACF,WAAYC,GAAkB,IAAD,8BACzB,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GACTC,OAAQ,GACRC,MAAO,IANc,E,yFAU7B,WAA6BC,GAA7B,uEACUC,EAAQD,EAAME,OAAOC,MAAM,MAAMC,OAAOC,SAC9CC,KAAKC,SAAL,2BACOD,KAAKV,OADZ,IAEIE,OAAQG,KAJhB,gD,2HAQA,WAA8BD,GAA9B,uEACUC,EAAQD,EAAME,OAAOC,MAAM,MAAMC,OAAOC,SAE9CC,KAAKC,SAAL,2BACOD,KAAKV,OADZ,IAEIC,QAASI,KALjB,gD,kFASA,WACI,IAAMF,EAAQ,GAERF,EAAUS,KAAKV,MAAMC,QAAQW,QAC7BV,EAASQ,KAAKV,MAAME,OAAOU,QAKjC,IAHAX,EAAQY,MAAK,iBAAM,GAAMC,KAAKC,YAC9Bb,EAAOW,MAAK,iBAAM,GAAMC,KAAKC,YAEtBd,EAAQe,OAAS,GAAG,CACvB,IAAMC,EAAQhB,EAAQiB,MAChBC,EAAQjB,EAAOkB,QAErBjB,EAAMkB,KAAK,CAACJ,EAAOE,IAGvB,KAAOjB,EAAOc,OAAS,GAAG,CACtB,IAAMC,EAAQf,EAAOgB,MACfC,EAAQjB,EAAOgB,MAErBf,EAAMkB,KAAK,CAACJ,EAAOE,IAGvBT,KAAKC,SAAL,2BACOD,KAAKV,OADZ,IAEIG,MAAOA,O,yBAIf,WAAuB,IAAD,OAClB,OAAgC,IAA5BO,KAAKV,MAAMG,MAAMa,OACV,qCAIP,oCACI,+BACI,+BACCN,KAAKV,MAAMG,MAAMmB,KAAI,SAACC,EAA8BC,GAC7C,OACI,wBAAIC,IAAKD,GACL,wBAAIE,UAAW,EAAKC,SAASJ,EAAK,IAAM,SAAW,SAAUA,EAAK,SACrDK,IAAZL,EAAK,GACF,wBAAIG,UAAW,EAAKC,SAASJ,EAAK,IAAM,SAAW,SAAUA,EAAK,IAClE,sC,sBAYpC,SAAiBM,GACb,YAAgBD,IAATC,GAA6BnB,KAAKV,MAAMC,QAAQ6B,SAASD,K,oBAGpE,WAAiB,IAAD,OACZ,OACI,yBAAKH,UAAU,WACX,6BACI,6BACI,sCACA,8BAAUK,KAAM,GAAIF,KAAK,SAASG,SAAW,SAAAC,GAAK,OAAI,EAAKC,eAAeD,EAAME,OAAO/B,WAE3F,6BACI,uCACA,8BAAU2B,KAAM,GAAIF,KAAK,UAAUG,SAAW,SAAAC,GAAK,OAAI,EAAKG,gBAAgBH,EAAME,OAAO/B,WAE7F,6BACI,4BAAQiC,QAAS,kBAAM,EAAKC,kBAA5B,oBAGR,6BACK5B,KAAK6B,oB,GAzGRC,IAAMC,WAgHxB,sBAAC,8EACGC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC9C,EAAD,OAEJ+C,SAASC,eAAe,SAL/B,0CAAD,I","file":"static/js/main.5fb3f845.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\ntype AppProps = {}\n\ntype AppState = {\n    members: string[];\n    guests: string[];\n    teams: Array<(string | undefined)[]>\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            members: [],\n            guests: [],\n            teams: []\n        }\n    }\n\n    private async onGuestsChange(value: string) {\n        const names = value.trim().split('\\n').filter(Boolean)\n        this.setState({\n            ...this.state,\n            guests: names,\n        });\n    }\n\n    private async onMembersChange(value: string) {\n        const names = value.trim().split('\\n').filter(Boolean);\n\n        this.setState({\n            ...this.state,\n            members: names,\n        });\n    }\n\n    private generateTeams(): void {\n        const teams = [];\n\n        const members = this.state.members.slice();\n        const guests = this.state.guests.slice();\n\n        members.sort(() => 0.5 - Math.random());\n        guests.sort(() => 0.5 - Math.random());\n\n        while (members.length > 0) {\n            const name1 = members.pop();\n            const name2 = guests.shift();\n\n            teams.push([name1, name2])\n        }\n\n        while (guests.length > 0) {\n            const name1 = guests.pop();\n            const name2 = guests.pop();\n\n            teams.push([name1, name2])\n        }\n\n        this.setState({\n            ...this.state,\n            teams: teams,\n        });\n    }\n\n    private renderTeams() {\n        if (this.state.teams.length === 0) {\n            return <></>\n        }\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {this.state.teams.map((team: (string | undefined)[], index: number) => {\n                            return (\n                                <tr key={index}>\n                                    <td className={this.isMember(team[0]) ? 'member' : 'guest'}>{team[0]}</td>\n                                    {team[1] !== undefined ?\n                                        <td className={this.isMember(team[1]) ? 'member' : 'guest'}>{team[1]}</td> :\n                                        <td></td>}\n                                </tr>\n                            )\n                        }\n                    )}\n                    </tbody>\n                </table>\n            </>\n        )\n\n    }\n\n    private isMember(name?: string): boolean {\n        return name === undefined ? false : this.state.members.includes(name);\n    }\n\n    public render() {\n        return (\n            <div className=\"wrapper\">\n                <div>\n                    <div>\n                        <h2>Guests</h2>\n                        <textarea rows={10} name=\"guests\" onChange={(event => this.onGuestsChange(event.target.value))}/>\n                    </div>\n                    <div>\n                        <h2>Members</h2>\n                        <textarea rows={10} name=\"members\" onChange={(event => this.onMembersChange(event.target.value))}/>\n                    </div>\n                    <div>\n                        <button onClick={() => this.generateTeams()}>Generate teams</button>\n                    </div>\n                </div>\n                <div>\n                    {this.renderTeams()}\n                </div>\n            </div>\n        );\n    }\n}\n\n(async () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n})()\n\n"],"sourceRoot":""}